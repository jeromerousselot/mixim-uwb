#!/usr/bin/env python2

"""
Creates Makefile(s) for building veins_catch.
"""

import os
import sys
import subprocess
from logging import info, warning, error
from optparse import OptionParser


if sys.version_info[0] == 3:
    warning("Warning: running configure with python3 might result in subtle errors.")

# Option handling
parser = OptionParser()
parser.add_option("--with-veins", dest="veins", help="link Veins_INET with a version of Veins installed in PATH [default: do not link with Veins]", metavar="PATH", default="../..")
(options, args) = parser.parse_args()

if args:
    warning("Superfluous command line arguments: \"%s\"" % " ".join(args))


# Start with default flags
makemake_flags = ['--make-so', '-f', '--deep', '-I', '.', '-O', 'out']


# Add flags for Veins
if options.veins:
    check_fname = os.path.join(options.veins, 'src/veins/package.ned')
    expect_version = '4'
    if not os.path.isfile(check_fname):
        error('Could not find Veins (by looking for %s). Check the path to Veins (--with-veins=... option) and the Veins version (should be version %s)' % (check_fname, expect_version))
        sys.exit(1)

    veins_header_dirs = [os.path.join(os.path.relpath(options.veins, 'src'), 'src')]
    veins_includes = ['-I' + s for s in veins_header_dirs]
    veins_link = ["-L" + os.path.join(os.path.relpath(options.veins, 'src'), 'src'), "-lveins$(D)"]
    veins_defs = []

    makemake_flags += veins_includes + veins_link + veins_defs


# Start creating files
if not os.path.isdir('out'):
    os.mkdir('out')

subprocess.check_call(['env', 'opp_makemake'] + makemake_flags, cwd='src')

info('Configure done. You can now run "make".')
